!function(){"use strict";class e{constructor(e,t,s,r,n,i){this._name=e.name,this._link=e.link,this._id=e._id,this._isLiked=e.isLiked,this._cardSelector=t,this._handleImageClick=s,this._handleDelIcon=r,this._handleFavIcon=n,this._handleDislike=i}_setEventListeners(){this._cardFavIcon.addEventListener("click",(()=>{this._isLiked?this._handleDislike(this):this._handleFavIcon(this)})),this._cardDelIcon.addEventListener("click",(()=>{this._handleDelIcon(this)})),this._cardImageEl.addEventListener("click",(()=>{this._handleImageClick(this._link,this._name)}))}toggleFavIcon(){this._cardFavIcon.classList.toggle("card__favorite-button_pressed")}handleDelIcon(){this._cardElement.remove(),this._cardElement=null}getId(){return this._id}getView(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardImageEl=this._cardElement.querySelector("#card-image"),this._cardTitleEl=this._cardElement.querySelector("#card-name"),this._cardImageEl.src=this._link,this._cardImageEl.alt=this._name,this._cardTitleEl.textContent=this._name,this._cardFavIcon=this._cardElement.querySelector(".card__favorite-button"),this._cardDelIcon=this._cardElement.querySelector(".card__delete-button"),this._isLiked?this._cardFavIcon.classList.add("card__favorite-button_pressed"):this._cardFavIcon.classList.remove("card__favorite-button_pressed"),this._setEventListeners(),this._cardElement}}class t{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t,this._inputEls=this._form.querySelectorAll(this._inputSelector),this._submitButton=this._form.querySelector(this._submitButtonSelector)}_showInputError(e){const t=this._form.querySelector("#"+e.id+"-error");e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._form.querySelector("#"+e.id+"-error");e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(){return Array.from(this._inputEls).some((e=>!e.validity.valid))}_disableButton(){this._submitButton&&(this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0)}_enableButton(){this._submitButton&&(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}toggleButtonState(){this._hasInvalidInput()?this._disableButton():this._enableButton()}disableSubmitButton(){this._disableButton()}_setEventListeners(){this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetValidation(){this._inputEls.forEach((e=>{this._checkInputValidity(e)}))}}class s{constructor(e){this._popupElement=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popupElement.addEventListener("click",(e=>{(e.target===this._popupElement||e.target.classList.contains("modal__close-button"))&&this.close()}))}}class r extends s{constructor(e,t){super(e),this._popupForm=this._popupElement.querySelector(".modal__form"),this._submitBtn=this._popupElement.querySelector(".modal__save-button"),this._submitBtnDefault=this._submitBtn.textContent,this._inputEls=this._popupForm.querySelectorAll(".modal__input"),this._handleFormSubmit=t}close(){this._popupForm.reset(),super.close()}_getInputValues(){const e={};return this._inputEls.forEach((t=>{e[t.name]=t.value})),e}renderLoading(e){this._submitBtn.textContent=e?"Saving...":this._submitBtnDefault}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}}const n={inputSelector:".modal__input",submitButtonSelector:".modal__save-button",inactiveButtonClass:"modal__save-button_disabled",inputErrorClass:"modal__error",errorClass:"modal__error_visible"},i=document.forms["profile-edit-form"],a=document.forms["profile-add-form"],o=document.forms["avatar-edit-form"],l=document.querySelector("#profile-avatar-btn"),d=document.querySelector("#profile-edit-btn"),c=document.querySelector("#profile-name-input"),h=document.querySelector("#profile-description-input"),_=document.querySelector("#profile-add-btn"),u=(document.querySelector(".cards__list"),new class{constructor(e,t,s){this._nameEl=document.querySelector(e),this._descriptionEl=document.querySelector(t),this._avatarEl=document.querySelector(s)}getUserInfo(){return{name:this._nameEl.textContent,description:this._descriptionEl.textContent,avatar:this._avatarEl.textContent}}setUserInfo(e,t){this._nameEl.textContent=e,this._descriptionEl.textContent=t}setUserAvatar(e){this._avatarEl.src=e}}("#profile-name","#profile-description","#profile-avatar")),m=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_resValidate(e){return e.ok?e.json():Promise.reject(`Error occured: ${e.status}`)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers}).then(this._resValidate)}setUserInfo(e){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then(this._resValidate)}getUserAvatar(){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"GET",headers:this._headers}).then(this._resValidate)}setUserAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then(this._resValidate)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers}).then(this._resValidate)}addCard(e){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})}).then(this._resValidate)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._resValidate)}addLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._resValidate)}deleteLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._resValidate)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"d116fd12-6c63-4575-acfb-58f1bbf2e648","Content-Type":"application/json"}}),p=new class{constructor(e,t){this._renderer=e,this._container=document.querySelector(t)}renderItems(e){e.forEach((e=>{const t=this._renderer(e);this._container.append(t)}))}addItem(e){const t=this._renderer(e);this._container.prepend(t)}}((function(t){const s=new e(t,"#card-template",(function(e,t){f.open(e,t)}),(function(e){g.open(),g.setSubmitAction((()=>{g.renderLoading(!0),m.deleteCard(e.getId()).then((()=>{e.handleDelIcon(),g.close()})).catch(console.error).finally((()=>{g.renderLoading(!1)}))}))}),(function(e){m.addLike(e.getId()).then((()=>{s.toggleFavIcon()})).catch(console.error)}),(function(e){m.deleteLike(e.getId()).then((()=>{e.toggleFavIcon()})).catch(console.error)}));return s.getView()}),".cards__list");m.getInitialCards().then((e=>{p.renderItems(e)})).catch(console.error),m.getUserInfo().then((e=>{let{name:t,about:s,avatar:r}=e;u.setUserInfo(t,s),u.setUserAvatar(r)})).catch(console.error);const E=new t(n,i),v=new t(n,a),b=new t(n,o);E.enableValidation(),v.enableValidation(),b.enableValidation();const f=new class extends s{constructor(e){super(e),this._popupImage=this._popupElement.querySelector(".modal__image-preview"),this._popupName=this._popupElement.querySelector(".modal__name-preview")}open(e,t){this._popupImage.src=e,this._popupImage.alt=t,this._popupName.textContent=t,super.open()}}("#card-preview-modal");f.setEventListeners();const g=new class extends s{constructor(e){super(e),this._popupForm=this._popupElement.querySelector(".modal__form"),this._submitBtn=this._popupElement.querySelector(".modal__save-button"),this._submitBtnDefault=this._submitBtn.textContent}setSubmitAction(e){this._handleFormSubmit=e}renderLoading(e){this._submitBtn.textContent=e?"Deleting...":this._submitBtnDefault}setEventListeners(){this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit()})),super.setEventListeners()}}("#card-delete-modal");g.setEventListeners();const L=new r("#profile-add-modal",(e=>{L.renderLoading(!0),m.addCard(e).then((e=>{p.addItem(e),L.close(),v.toggleButtonState()})).catch(console.error).finally((()=>{L.renderLoading(!1)}))}));L.setEventListeners();const I=new r("#avatar-edit-modal",(e=>{I.renderLoading(!0),m.setUserAvatar(e).then((e=>{u.setUserAvatar(e.avatar),I.close(),b.toggleButtonState()})).catch(console.error).finally((()=>{I.renderLoading(!1)}))}));I.setEventListeners();const S=new r("#profile-edit-modal",(e=>{S.renderLoading(!0),m.setUserInfo(e).then((e=>{u.setUserInfo(e.name,e.about),S.close(),E.toggleButtonState()})).catch(console.error).finally((()=>{S.renderLoading(!1)}))}));S.setEventListeners(),_.addEventListener("click",(()=>{L.open()})),l.addEventListener("click",(()=>{I.open()})),d.addEventListener("click",(()=>{const{name:e,description:t}=u.getUserInfo();c.value=e,h.value=t,E.resetValidation(),S.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,